#!/bin/bash
#
# mapreduce
#
# start, stop and check on the MapReduce Manager and Worker processes.

# Stop on errors, print commands
# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail
set -x

start() {
    if [[ $(pgrep -lf "mapreduce-manager") ]]; then
        echo "Error: mapreduce-manager is already running"
        exit 1
    fi
    if [[ $(pgrep -lf "mapreduce-worker") ]]; then
        echo "Error: mapreduce-worker is already running"
        exit 1
    fi
    echo "starting mapreduce ..."
    mapreduce-master 6000 &
    sleep 2
    mapreduce-worker 6000 6001 &
    mapreduce-worker 6000 6002 &
}

stop() {
    # Detect GNU vs BSD netcat. We need netcat to close the connection after
    # sending a message, which requires different options.
    set +o pipefail  # Avoid erroneous failures due to grep returning non-zero
    if nc -h 2>&1 | grep -q "\-c"; then
      NC="nc -c"
    elif nc -h 2>&1 | grep -q "\-N"; then
      NC="nc -N"
    elif nc -h 2>&1 | grep -q "\-C"; then
      NC="nc -C"
    else
      echo "Error detecting netcat version."
      exit 1
    fi
    set -o pipefail

    echo '{"message_type": "shutdown"}' | $NC localhost 6000 || true
    sleep 2  # give the manager time to receive signal and send to workers

    echo "killing mapreduce manager ..."
    pkill -f mapreduce-manager || true

    echo "killing mapreduce worker ..."
    pkill -f mapreduce-worker || true
}

status() {
    if [[ $(pgrep -lf "mapreduce-manager") ]]; then
        echo "manager running"
    else
        echo "manager not running"
    fi
    if [[ $(pgrep -lf "mapreduce-worker") ]]; then
        echo "workers running"
    else 
        echo "workers not running"
    fi
}

case $1 in
  "start")
    start
    ;;

  "stop")
    stop
    ;;

  "status")
    status
    ;;

  "restart")
    stop
    start
    ;;

  *)
    usage
    exit 1
    ;;
esac